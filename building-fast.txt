i've done a lot of reading about building new software products. everything
talks about launching fast and often.

while building my grocery list product, i was trying to do just that.

i limited the features needed. if i thought something would be too complex to
build, i'd slim it down. but i never got something i could release.

then i figured out my problem.

i started with the code. i wrote the entire back-end api. i figured, my next
step would be to write the rest interface, then the Ui, and then release. it
all sounded like a good plan. a great plan.

a great plan, at least to me. in the past, i've tried to do it by building the
whole UI, then worrying about tying in the backend later. this time, i figured
i'd start with the part that always gave me trouble. instead, i'd get that built
first, then the rest would be easy to add in.

i realized there was a problem with this approach after spending a few weeks and
not having a releasable product. the problem was, i didn't have a usable
product that i could release.

my solution to this problem came as a bit of an epiphany. i needed to focus on
building the product, or a feature in the product, end to end. i already knew
this, but for some reason didn't follow it.

to get the app out, i needed to build something that was usable. so i focused on
building the things that were most needed to be usable - a list with checkable
items and a way to add items. build that, end to end, and publish it. there is a
lot i don't need now (or maybe ever). a url, a banner, other features,
other lists. these are all unnecessary to getting the initial app out. worry
about these later.

to figure out what i actually needed, i built to lists. one for the features to
build, another for the framework features. i brain dumped everything that i
could think of, then started deleting everything that i didn't need. it came
down to the features above, plus a web interface, server, database, and a
hosting machanism.

i already decided on using node.js, so i already figured that would be my
server. and i already decided on mongodb. both of these have free hosting
options, so i am going to start by using them (mongolab and nodejitsu). i
registered for accounts on both.

(i also started a new tasklist file at this point. i used it to only write what
i need to do now, or need to do next.)

step two is to build a simple web server, a static html page, and push it to the
server. this also made me realize i need a deploy process, so i added that to
the list. nodejitsu has that capability, so i use that to deploy. it was pretty
easy. all it takes is running:

    sudo jitsu deploy

at this stopping point, i have a web page that i display on a hosted site. and i
pass one of my fundamentals by deploying early.

== 2012/12/27 ==

so now i want to build the simple app. lets see how long this takes. its going
to have the basic features needed - add and display items -- and then deploy it
to production.

i like to use angular, so i'm going to start by adding that to the index. then
i'm going to add bootstrap because that will make UI development faster.

i built the app using bootstrap, angular, and a simple main.js script. i started
by only added the item add functionality and showing it in the list. then i
setup the url to submit the ajax request.

i then used mongoose to quickly setup the database environment. this worked well
and only took a few minutes to tie into the database. but then i ran into a
problem. to deploy, i need to change the pointer for the database host from my
local machine to the mongolab instance that i have setup. so now i have to setup
a conf file. going to start with nconf and see how it works. i added it to my
packages and installed it.

for simple use, i'm using an environment variable for determining which conf
file to load. i created a config file and load in a conf file based on the
NODE_ENV environment variable. setup the two configuration files. still need to
get the mongolab URL and POST configured in the prod file.

after spending almost 2 hours on trying to figure out why this didn't work when
deployed to nodejitsu, i gave up and just commented out the lines for prod. i'll
come back to this again a little later -- when i finally get tired of making
these code updates.

== 2012/12/28 ==

in about two hours, i was able to hack together the rest of the basic app. i ran
into a few stumbling blocks, mostly related to the fact that i'm still learning
angular, node.js, and mongoose. but it all came together pretty well at the end.
the code isn't pretty, but it functions.

one thing i found was that working on the project in this way caused a lot of
additional work while updating the back-end because i had to use the UI to test.
next time, i need to write test functions as i go for the API. angular provides
some UI testing capabilities that I also need to investigate. i added this as a
feature to add to my framework.

at this stopping point, i've added the top two feature for my app and checked
off all but the last two pieces of my framework. overall, it only took a few
hours to get here. even less if you exclude the two hours i spent fighting with
nconf last night.

i set the next thing to work on in my tasklist before finishing up.

== other things that need to happen ==
* better code organization
* improve the UI
* improve the UI for mobile

