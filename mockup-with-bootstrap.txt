my goal with this project is to show how easy it is to use twitter bootstrap to
rapidly mockup a HTML application. the constraints are that i can't use any
custom CSS or JS -- i can only use things provided by bootstrap. interactivity
is not important for this demonstration.

= the app =
 
i want to build a (fake) shopping list app. these are the features i want it to
have: 
* multiple lists open at one time
* collect items by name
* provide checkbox to tick off items gotten while shopping
* provide easy way to add items
* toggle between shopping and editing modes

= getting started =

i started by setting up the directory structure. in my project directory, i
created css/, js/. and bootstrap/ directories. after that, i created an empty
index.html file. the js and css directories are for future use. i don't plan on using
them for this project.

with these in place, i downloaded bootstrap. it is available here: 
http://twitter.github.com/bootstrap/

i wanted to keep this simple, so i just downloaded the zip from the home page.
no customizations are necessary for this project. i copied the unzipped files to
bootstrap/.

= get mocking =

i start filling in index.html with the initial stuff. it includes all the
information needed in the <head> and the script calls in the <body>.

    <!DOCTYPE html>
    <html lang="en">
	<head>
	    <title>shopping lists!</title>
	    <meta charset="utf-8"/>
	    <meta name="viewport" content="width=device-width">
	    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
	    <meta name="apple-mobile-web-app-capable" content="yes">
	    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
	    <link rel="stylesheet" href="bootstrap/css/bootstrap-responsive.min.css">
	</head>
	<body>
	    <script src="http://code.jquery.com/jquery-latest.js"></script>
	    <script src="./bootstrap/js/bootstrap.min.js"></script>
	</body>
    </html>

most of this is fairly self explanatory or not worth explaining. the meta tags
are standard for mobile compatibility. the links include both the bootstrap and
bootstrap-responsive stylesheets. and the script tags in the body include
bootstrap and jquery javascript files. jquery is required for bootstrap
javscript.

== the layout ==

the first thing i want to define is the general layout. on a sheet of paper, i
drew a quick mockup. it includes:
* page header that shows the list name
* left sidebar with links to the lists
* the shopping list taking up the rest of the screen.

in the <body>, i defined these three things. first i use the page-header
component with the current list's name (list 1). then i define a row-fluid to
hold the sidebar and the shopping list. the sidebar is 2 columns wide with
the main content taking up the remaining 10 columns.

    <div class="page-header">
	<h1>List 1</h1>
    </div>
    <div class="row-fluid">
	<div class="span2">
	</div>
	<div class="span8">
	</div>
    </div>

now that the scaffolding is done, i can start inserting the page content. i'll
define the sidebar first. this will include a list of 4 items, labeled list 1-4,
a new list link, and some dividers to add some visual separateion. the first
list is going to be active. place this code in the first div in the row.

    <ul class="nav nav-list" id="list-nav">
	<li class="active"><a href="#">list 1</a></li>
	<li><a href="#">list 2</a></li>
	<li><a href="#">list 3</a></li>
	<li><a href="#">list 4</a></li>
	<li class="divider"></li>
	<li><a href="#" id="start_new_list">new list</a></li>
	<li class="divider"></li>
    </ul>

i used the nav-list element on a <ul> to display the nav. each list name is in a
<li> and the first one is given a class of active. i put divider <li>s around the new
list <li> to separate it from the list. this is pretty simple html. if you look
at your page, you'll see that this simple html gives you a nice looking side
nav.

with the list, i'm going to break it out into 3 separate sections. a top nav
to show how easy that is to implement, the item list, and a form to add items to
the list.

the top nav has an option for edit or shop modes. if i was defining interaction,
this would be used to show and hide different elements in the list.

    <ul class="nav nav-pills">
	<li class="active">
	    <a href="#" id="nav_edit">edit</a>
	</li>
	<li>
	    <a href="#" id="nav_shop">shop</a>
	</li>
    </ul>

i use the nav-pills component for the nav. i also set one to active.

before i define the list elements, i defined the container. 

    <div class="well">
	<ul class="unstyled" id="shopping-list">
	</ul>
    </div>

the "well" is a component that provides a visual background around the list.
this makes it stand out from the rest of the elements on the page. then i use an
unstyled list for the shopping list.

the lists are the most complicated part of this exercise. each item needs a
checkbox, the item name, and a button to remove it. 

    <li>
	<label class="checkbox inline">
	    <input type="checkbox">
	    <span>eggs</span>
	</label>
	<button class="pull-right btn btn-danger btn-mini">
	    <i class="icon-minus"></i>
	</button>
    </li>

each item starts with an <li>. for the checkbox and item name, i used the
standard bootstrap checkbox markup. the inline class on the label is important
so that the remove button lines up on the same row.

for the button, i use a <button> tag with an <i> inside of it. the <i> makes the
button show one of the included bootstrap icons. on the button, the classes
include some important things. the pull-right floats the button to the right of
the list. btn-danger makes the button red. and the btn-mini makes it a smaller
button.

now copy and paste this a few more times and add some different items to
populate the list. i added items to build a breakfast sandwich.

the final piece is the form to add items to the list. this includes a 
textbox and a button to add the items.

    <form id="edit_form">
	<div class="control-group">
	    <input type="text" id="new_items_text" placeholder="add items here" />
	</div>
	<div class="control-group">
	    <button id="add_items" type="submit" class="btn btn-primary">add</button>
	    <button type="button" class="btn">cancel</button>
	</div>
    </form>

i start with the form. inside the form i put in two control-group <divs>. the
first contains the textbox with a placeholder. the second is for the buttons.
the textbox is standard, so i don't cover much there. the buttons use the
bootstrap btn class. i entered an add and a cancel button. on the add, i put a
btn-primary class on it to make it appear differently that the cancel button.

== responsive ==

the best part about doing mockups with way is that the finish product is
responsive. there were a few decisions i made above that made everything display
properly in smaller contexts.

you can easily test this by resizing your browser. as you shrink it, you'll see
it change.

i like to use one of the chrome built-in tools to test my responsive layouts. i
find that to be better than just doing resize tests. to use this, open up the
chrome developer console and:

# click the little gear icon towards the bottom right corner
# click the overrides tab
# check user agent, device metric, and/or simulate touch events

you'll be able to select different options once you enable those options.

there are also several tools available for both chrome and firefox that will
enable you to do similar things. i typically try to keep my development add-ons
to a minimum so that i know how to do it if i have to write code on a different
computer.

= next steps =

if you are building something you want to share with people, both Amazon S3 and
Google Drive provide the ability to host websites. You can use either to easily
host your mockup pages.

you can also add in interactivity. i'll do this in another article showing off
javascript MVC frameworks.

if you are building a real application or page, i suggest you customize your
bootstrap install. you can do this from the bootstrap customize page.
